import pyodbc
import warnings
import pandas as pd
import time
import os
from tkinter import Tk, filedialog
from datetime import datetime

warnings.filterwarnings('ignore')

# Hide the Tkinter root window
root = Tk()
root.withdraw()

# Define server and port
server = 'localhost'
port = '9400'

# Create the ODBC connection string (no company name required)
connection_string = (
    f"DRIVER={{Tally ODBC Driver64}};"
    f"SERVER={server},{port};"
)

# Connect to Tally ODBC without pop-ups
try:
    cnxn = pyodbc.connect('DSN=TallyODBC64_9400;UID=;PWD=;')
    cursor = cnxn.cursor()
    print("✅ Connected to Tally ODBC successfully!")
except Exception as e:
    print(f"❌ Error connecting to Tally ODBC: {e}")
    exit()

# Query: Master Data
start_time = time.time()
query = '''SELECT $LName, $Parent, $_PrimaryGroup,  $OpeningBalance, $ClosingBalance, $ExOwnerCompany, $IsRevenue FROM A_M_LedgerGrp'''  
df = pd.read_sql(query, cnxn)
print("--- %s seconds for reading master data ---" % (time.time() - start_time))

# Ask user where to save Master Data file
master_data_file = filedialog.asksaveasfilename(
    defaultextension=".csv",
    filetypes=[("CSV files", "*.csv")],
    title="Save Master Data File",
    initialfile=f"MasterData_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
)

# If the user cancels the dialog, exit
if not master_data_file:
    print("❌ Master data file save canceled. Exiting.")
    exit()

# Save Master Data file
df.to_csv(master_data_file, index=False)

print("✅ Master Data file saved successfully!")
print(f"  - Master Data: {master_data_file}")
